// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OrangeHRM.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Excel Functionality", new string[] {
            "EndToEnd",
            "RegressionTest"}, SourceFile="Features\\Excel.feature", SourceLine=2)]
    public partial class ExcelFunctionalityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "EndToEnd",
                "RegressionTest"};
        
#line 1 "Excel.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Excel Functionality", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _010_PurgeTheFiles(string filePath, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Triangle"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FilePath", filePath);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("010_ Purge the Files", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given(string.Format("The File Exsist in Directory Path \"{0}\"", filePath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("I purge the File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("The File not Exsist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("010_ Purge the Files, C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.csv", new string[] {
                "Triangle"}, SourceLine=14)]
        public void _010_PurgeTheFiles_CUsersKrishOrangeHRMExcelFileEmployeeDetails_Csv()
        {
#line 8
this._010_PurgeTheFiles("C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.csv", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("010_ Purge the Files, C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.xlsx", new string[] {
                "Triangle"}, SourceLine=14)]
        public void _010_PurgeTheFiles_CUsersKrishOrangeHRMExcelFileEmployeeDetails_Xlsx()
        {
#line 8
this._010_PurgeTheFiles("C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.xlsx", ((string[])(null)));
#line hidden
        }
        
        public virtual void _020_CreateTheFiles(string filePath, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Triangle"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FilePath", filePath);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("020_ Create The Files", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(string.Format("Excel File called \"{0}\" not exsist", filePath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.When("I create the new Excel File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("The Excel File is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("020_ Create The Files, C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.csv", new string[] {
                "Triangle"}, SourceLine=27)]
        public void _020_CreateTheFiles_CUsersKrishOrangeHRMExcelFileEmployeeDetails_Csv()
        {
#line 21
this._020_CreateTheFiles("C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.csv", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("020_ Create The Files, C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.xlsx", new string[] {
                "Triangle"}, SourceLine=27)]
        public void _020_CreateTheFiles_CUsersKrishOrangeHRMExcelFileEmployeeDetails_Xlsx()
        {
#line 21
this._020_CreateTheFiles("C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.xlsx", ((string[])(null)));
#line hidden
        }
        
        public virtual void _030_CompareTheFiles(string masterFilePath, string comparisonFilePath, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MasterFilePath", masterFilePath);
            argumentsOfScenario.Add("ComparisonFilePath", comparisonFilePath);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("030_Compare the Files", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
 testRunner.Given(string.Format("I Retrieve the Master \"{0}\"", masterFilePath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
 testRunner.Given(string.Format("I Retrieve the Comparison \"{0}\"", comparisonFilePath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
 testRunner.When("I Compare the Files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("I Retrieve the Output Difference File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("030_Compare the Files, C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.csv", SourceLine=39)]
        public void _030_CompareTheFiles_CUsersKrishOrangeHRMExcelFileEmployeeDetails_Csv()
        {
#line 32
this._030_CompareTheFiles("C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.csv", "C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails-01.csv", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("030_Compare the Files, C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.xlsx", SourceLine=39)]
        public void _030_CompareTheFiles_CUsersKrishOrangeHRMExcelFileEmployeeDetails_Xlsx()
        {
#line 32
this._030_CompareTheFiles("C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails.xlsx", "C:\\Users\\krish\\OrangeHRMExcelFile\\EmployeeDetails-01.xlsx", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("040 Create the Database", SourceLine=43)]
        public void _040CreateTheDatabase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("040 Create the Database", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
 testRunner.Given("I Create the Database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
